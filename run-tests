#! /usr/bin/env python3

import os
import subprocess
import sys
import platform
import argparse
import re
import pyboard
from glob import glob

# Tests require at least CPython 3.3. If your default python3 executable
# is of lower version, you can point MICROPY_CPYTHON3 environment var
# to the correct executable.
if os.name == 'nt':
    CPYTHON3 = os.getenv('MICROPY_CPYTHON3', 'python3.exe')
else:
    CPYTHON3 = os.getenv('MICROPY_CPYTHON3', 'python3')

# Set PYTHONIOENCODING so that CPython will use utf-8 on systems which set another encoding in the locale
os.environ['PYTHONIOENCODING'] = 'utf-8'

def rm_f(fname):
    if os.path.exists(fname):
        os.remove(fname)

# unescape wanted regex chars and escape unwanted ones
def convert_regex_escapes(line):
    cs = []
    escape = False
    for c in str(line, 'utf8'):
        if escape:
            escape = False
            cs.append(c)
        elif c == '\\':
            escape = True
        elif c in ('(', ')', '[', ']', '{', '}', '.', '*', '+', '^', '$'):
            cs.append('\\' + c)
        else:
            cs.append(c)
    # accept carriage-return(s) before final newline
    if cs[-1] == '\n':
        cs[-1] = '\r*\n'
    return bytes(''.join(cs), 'utf8')


def run_micropython(pyb, args, test_file, is_special=False):
    # run on hydrabus
    pyb.enter_raw_repl()
    try:
        output_mupy = pyb.execfile(test_file)
    except pyboard.PyboardError:
        output_mupy = b'CRASH'

    # canonical form for all ports/platforms is to use \n for end-of-line
    output_mupy = output_mupy.replace(b'\r\n', b'\n')

    # don't try to convert the output if we should skip this test
    if output_mupy in (b'SKIP\n', b'CRASH'):
        return output_mupy

    if is_special:
        # convert parts of the output that are not stable across runs
        with open(test_file + '.exp', 'rb') as f:
            lines_exp = []
            for line in f.readlines():
                if line == b'########\n':
                    line = (line,)
                else:
                    line = (line, re.compile(convert_regex_escapes(line)))
                lines_exp.append(line)
        lines_mupy = [line + b'\n' for line in output_mupy.split(b'\n')]
        if output_mupy.endswith(b'\n'):
            lines_mupy = lines_mupy[:-1] # remove erroneous last empty line
        i_mupy = 0
        for i in range(len(lines_exp)):
            if lines_exp[i][0] == b'########\n':
                # 8x #'s means match 0 or more whole lines
                line_exp = lines_exp[i + 1]
                skip = 0
                while i_mupy + skip < len(lines_mupy) and not line_exp[1].match(lines_mupy[i_mupy + skip]):
                    skip += 1
                if i_mupy + skip >= len(lines_mupy):
                    lines_mupy[i_mupy] = b'######## FAIL\n'
                    break
                del lines_mupy[i_mupy:i_mupy + skip]
                lines_mupy.insert(i_mupy, b'########\n')
                i_mupy += 1
            else:
                # a regex
                if lines_exp[i][1].match(lines_mupy[i_mupy]):
                    lines_mupy[i_mupy] = lines_exp[i][0]
                else:
                    #print("don't match: %r %s" % (lines_exp[i][1], lines_mupy[i_mupy])) # DEBUG
                    pass
                i_mupy += 1
            if i_mupy >= len(lines_mupy):
                break
        output_mupy = b''.join(lines_mupy)

    return output_mupy

def run_tests(pyb, tests, args, base_path="."):
    test_count = 0
    testcase_count = 0
    passed_count = 0
    failed_tests = []
    skipped_tests = []

    skip_tests = set()

    for test_file in tests:
        test_file = test_file.replace('\\', '/')
        test_basename = os.path.basename(test_file)
        test_name = os.path.splitext(test_basename)[0]

        skip_it = test_file in skip_tests

        if skip_it:
            print("skip ", test_file)
            skipped_tests.append(test_name)
            continue

        # get expected output
        test_file_expected = test_file + '.exp'
        if os.path.isfile(test_file_expected):
            # expected output given by a file, so read that in
            with open(test_file_expected, 'rb') as f:
                output_expected = f.read()
        else:
            # run CPython to work out expected output
            try:
                output_expected = subprocess.check_output([CPYTHON3, '-B', test_file])
                if args.write_exp:
                    with open(test_file_expected, 'wb') as f:
                        f.write(output_expected)
            except subprocess.CalledProcessError:
                output_expected = b'CPYTHON3 CRASH'

        # canonical form for all host platforms is to use \n for end-of-line
        output_expected = output_expected.replace(b'\r\n', b'\n')

        if args.write_exp:
            continue

        # run Micro Python
        output_mupy = run_micropython(pyb, args, test_file)

        if output_mupy == b'SKIP\n':
            print("skip ", test_file)
            skipped_tests.append(test_name)
            continue

        testcase_count += len(output_expected.splitlines())

        filename_expected = test_basename + ".exp"
        filename_mupy = test_basename + ".out"

        if output_expected == output_mupy:
            print("pass ", test_file)
            passed_count += 1
            rm_f(filename_expected)
            rm_f(filename_mupy)
        else:
            with open(filename_expected, "wb") as f:
                f.write(output_expected)
            with open(filename_mupy, "wb") as f:
                f.write(output_mupy)
            print("FAIL ", test_file)
            failed_tests.append(test_name)

        test_count += 1

    print("{} tests performed ({} individual testcases)".format(test_count, testcase_count))
    print("{} tests passed".format(passed_count))

    if len(skipped_tests) > 0:
        print("{} tests skipped: {}".format(len(skipped_tests), ' '.join(skipped_tests)))
    if len(failed_tests) > 0:
        print("{} tests failed: {}".format(len(failed_tests), ' '.join(failed_tests)))
        return False

    # all tests succeeded
    return True

def main():
    cmd_parser = argparse.ArgumentParser(description='Run tests for MicroPython.')
    cmd_parser.add_argument('--device', default='/dev/ttyACM0', help='the serial device or the IP address of the pyboard')
    cmd_parser.add_argument('-b', '--baudrate', default=115200, help='the baud rate of the serial device')
    cmd_parser.add_argument('-u', '--user', default='micro', help='the telnet login username')
    cmd_parser.add_argument('-p', '--password', default='python', help='the telnet login password')
    cmd_parser.add_argument('-d', '--test-dirs', nargs='*', help='input test directories (if no files given)')
    cmd_parser.add_argument('--write-exp', action='store_true', help='save .exp files to run tests w/o CPython')
    cmd_parser.add_argument('--emit', default='bytecode', help='MicroPython emitter to use (bytecode or native)')
    cmd_parser.add_argument('--heapsize', help='heapsize to use (use default if not specified)')
    cmd_parser.add_argument('--via-mpy', action='store_true', help='compile .py files to .mpy first')
    cmd_parser.add_argument('--keep-path', action='store_true', help='do not clear MICROPYPATH when running tests')
    cmd_parser.add_argument('files', nargs='*', help='input test files')
    args = cmd_parser.parse_args()
    
    args.target='hydrabus'
    pyb = pyboard.Pyboard(args.device, args.baudrate, args.user, args.password)
    pyb.enter_raw_repl()

    if len(args.files) == 0:
        if args.test_dirs is None:
            test_dirs = ('stress', 'pyb', 'pybnative', 'inlineasm')
        else:
            # run tests from these directories
            test_dirs = args.test_dirs
        tests = sorted(test_file for test_files in (glob('{}/*.py'.format(dir)) for dir in test_dirs) for test_file in test_files)
    else:
        # tests explicitly given
        tests = args.files

    if not args.keep_path:
        # clear search path to make sure tests use only builtin modules
        os.environ['MICROPYPATH'] = ''

    # Even if we run completely different tests in a different directory,
    # we need to access feature_check's from the same directory as the
    # run-tests script itself.
    base_path = os.path.dirname(sys.argv[0]) or "."
    res = run_tests(pyb, tests, args, base_path)
    if pyb:
        pyb.close()
    if not res:
        sys.exit(1)

if __name__ == "__main__":
    main()
